/**
 * @file     ctxsw.s
 * @provides ctxsw
 *
 * COSC 3250 / COEN 4820 Assignment 4
 */
/* Embedded XINU, Copyright (C) 2023.  All rights reserved. */

#include <riscv.h>

.text
        .align 4
        .globl  ctxsw


/**
 * @fn void ctxsw(&oldstack, &newstack)
 *
 * Switch context (values in registers) to another process, saving the
 * current processes information. This function will not return as normally
 * thought as it will load in the program counter for a different process and
 * jump to that location and begin executing code.
 *
 * @param  &oldstack address of outgoing stack save area
 * @param  &newstack address of incoming stack save area
 * @return special case -- see above
 */
        .func ctxsw
ctxsw:

// TODO: Save process state, including at least the
//      callee-save ("non-volatile") registers.

        sd x1, CTX_A1*8(sp) #saves register x1 to sp offset by 8(1*8)
        sd x2, CTX_A2*8(sp) #saves register x2 to sp offset by 16(2*8)
        sd x3, CTX_A3*8(sp) #saves register x3 to sp offset by 24(3*8)
        sd x4, CTX_A4*8(sp) #saves register x4 to sp offset by 32(4*8)
        sd x5, CTX_A5*8(sp) #saves register x5 to sp offset by 40(5*8)
        sd x6, CTX_A6*8(sp) #saves register x6 to sp offset by 48(6*8)
        sd x7, CTX_A7*8(sp) #saves register x7 to sp offset by 56(7*8)
        sd x8, CTX_A8*8(sp) #saves register x8 to sp offset by 64(8*8)
        sd x9, CTX_A9*8(sp) #saves register x9 to sp offset by 72(9*8)
        sd x10, CTX_A10*8(sp) #saves register x10 to sp offset by 80(10*8)
        sd x11, CTX_A11*8(sp) #saves register x11 to sp offset by 88(11*8)
        sd x12, CTX_A12*8(sp) #saves register x12 to sp offset by 96(12*8)
        sd x13, CTX_A13*8(sp) #saves register x13 to sp offset by 104(13*4)
        sd x14, CTX_A14*8(sp) #saves register x14 to sp offset by 112(14*8)
        sd x15, CTX_A15*8(sp) #saves register x15 to sp offset by 120(15*8)

// TODO: Restore process state, including at least the
//      callee-save ("non-volatile") registers.

        ld x1, CTX_A1*8(sp) # loads register x1 from sp offset by 8(1*8)
        ld x2, CTX_A2*8(sp) # loads register x2 from sp offset by 16(2*8)
                                                                                                                                                                           1,3           Top
